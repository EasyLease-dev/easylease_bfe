# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: easylease
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: bfe
# "service" is the name of this project. This will also be added to your AWS resource names.
service: easylease-bfe

provider:
  name: aws
  runtime: nodejs20.x
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  region: "ap-south-1"
  httpApi:
    authorizers:
      customAuthorizer:
        type: request
        functionName: auth
  environment:
    USERS_TABLE_NAME: ${self:custom.UsersTable.name}
    PROPERTIES_TABLE_NAME: ${self:custom.PropertiesTable.name}
    PROPERTY_S3_BUCKET_NAME: ${self:custom.PropertyS3Bucket.name}
    JWT_SECRET: ${env.JWT_SECRET}
    SENDER_EMAIL: ${env.SENDER_EMAIL}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "ses:SendEmail"
      Resource: "*"
resources:
  Resources:
    UsersTable: ${file(resources/dynamodb/UserTable.yml):UsersTable}
    PropertiesTable: ${file(resources/dynamodb/PropertiesTable.yml):PropertiesTable}
    PropertyS3Bucket: ${file(resources/S3.yml):PropertyS3Bucket}
    PropertyS3BucketPolicy: ${file(resources/S3.yml):PropertyS3BucketPolicy}
plugins:
  - serverless-offline
functions:
  auth:
    handler: src/handlers/Auth/auth.handler
  register:
    handler: src/handlers/Auth/registerHandler.handler
    events:
      - httpApi:
          path: /auth/register
          method: post
  createUser:
    handler: src/handlers/User/createUser.handler
    events:
      - httpApi:
          path: /auth/create-user
          method: post
          authorizer: customAuthorizer
  updateUser:
    handler: src/handlers/User/updateUser.handler
    events:
      - httpApi:
          path: /user/update-user
          method: put
          authorizer: customAuthorizer
  validateTempPassword:
    handler: src/handlers/Auth/validateTempPassword.handler
    events:
      - httpApi:
          path: /auth/validate-temp-password
          method: post
  login:
    handler: src/handlers/Auth/loginHandler.handler
    events:
      - httpApi:
          path: /auth/login
          method: post
custom:
  UsersTable:
    name: !Ref UsersTable
    arn: !GetAtt UsersTable.Arn
  PropertiesTable:
    name: !Ref PropertiesTable
    arn: !GetAtt PropertiesTable.Arn
  PropertyS3Bucket:
    name: property-image-bfe-easylease-zdsfsfscfawcfsf-${self:provider.stage}
    arn: !GetAtt PropertyS3Bucket.Arn
